int main();
static void _cscout_dummy1(void) { _cscout_dummy1(); }
typedef struct { unsigned char __arr[2]; } __attribute__ ((__packed__)) __STRING2_COPY_ARR2; 
typedef struct { unsigned char __arr[3]; } __attribute__ ((__packed__)) __STRING2_COPY_ARR3; 
typedef struct { unsigned char __arr[4]; } __attribute__ ((__packed__)) __STRING2_COPY_ARR4; 
typedef struct { unsigned char __arr[5]; } __attribute__ ((__packed__)) __STRING2_COPY_ARR5; 
typedef struct { unsigned char __arr[6]; } __attribute__ ((__packed__)) __STRING2_COPY_ARR6; 
typedef struct { unsigned char __arr[7]; } __attribute__ ((__packed__)) __STRING2_COPY_ARR7; 
typedef struct { unsigned char __arr[8]; } __attribute__ ((__packed__)) __STRING2_COPY_ARR8; 
extern void *__rawmemchr (const void *__s, int __c); 
extern __inline size_t __strcspn_c1 (__const char *__s, int __reject); 
extern __inline size_t 
__strcspn_c1 (__const char *__s, int __reject) 
{ 
register size_t __result = 0; 
while (__s[__result] != '\0' && __s[__result] != __reject) 
++__result; 
return __result; 
} 
extern __inline size_t __strcspn_c2 (__const char *__s, int __reject1, 
int __reject2); 
extern __inline size_t 
__strcspn_c2 (__const char *__s, int __reject1, int __reject2) 
{ 
register size_t __result = 0; 
while (__s[__result] != '\0' && __s[__result] != __reject1 
&& __s[__result] != __reject2) 
++__result; 
return __result; 
} 
extern __inline size_t __strcspn_c3 (__const char *__s, int __reject1, 
int __reject2, int __reject3); 
extern __inline size_t 
__strcspn_c3 (__const char *__s, int __reject1, int __reject2, 
int __reject3) 
{ 
register size_t __result = 0; 
while (__s[__result] != '\0' && __s[__result] != __reject1 
&& __s[__result] != __reject2 && __s[__result] != __reject3) 
++__result; 
return __result; 
} 
extern __inline size_t __strspn_c1 (__const char *__s, int __accept); 
extern __inline size_t 
__strspn_c1 (__const char *__s, int __accept) 
{ 
register size_t __result = 0; 
while (__s[__result] == __accept) 
++__result; 
return __result; 
} 
extern __inline size_t __strspn_c2 (__const char *__s, int __accept1, 
int __accept2); 
extern __inline size_t 
__strspn_c2 (__const char *__s, int __accept1, int __accept2) 
{ 
register size_t __result = 0; 
while (__s[__result] == __accept1 || __s[__result] == __accept2) 
++__result; 
return __result; 
} 
extern __inline size_t __strspn_c3 (__const char *__s, int __accept1, 
int __accept2, int __accept3); 
extern __inline size_t 
__strspn_c3 (__const char *__s, int __accept1, int __accept2, int __accept3) 
{ 
register size_t __result = 0; 
while (__s[__result] == __accept1 || __s[__result] == __accept2 
|| __s[__result] == __accept3) 
++__result; 
return __result; 
} 
extern __inline char *__strpbrk_c2 (__const char *__s, int __accept1, 
int __accept2); 
extern __inline char * 
__strpbrk_c2 (__const char *__s, int __accept1, int __accept2) 
{ 
while (*__s != '\0' && *__s != __accept1 && *__s != __accept2) 
++__s; 
return *__s == '\0' ? NULL : (char *) (size_t) __s; 
} 
extern __inline char *__strpbrk_c3 (__const char *__s, int __accept1, 
int __accept2, int __accept3); 
extern __inline char * 
__strpbrk_c3 (__const char *__s, int __accept1, int __accept2, 
int __accept3) 
{ 
while (*__s != '\0' && *__s != __accept1 && *__s != __accept2 
&& *__s != __accept3) 
++__s; 
return *__s == '\0' ? NULL : (char *) (size_t) __s; 
} 
extern __inline char *__strtok_r_1c (char *__s, char __sep, char **__nextp); 
extern __inline char * 
__strtok_r_1c (char *__s, char __sep, char **__nextp) 
{ 
char *__result; 
if (__s == NULL) 
__s = *__nextp; 
while (*__s == __sep) 
++__s; 
__result = NULL; 
if (*__s != '\0') 
{ 
__result = __s++; 
while (*__s != '\0') 
if (*__s++ == __sep) 
{ 
__s[-1] = '\0'; 
break; 
} 
*__nextp = __s; 
} 
return __result; 
} 
extern char *__strsep_g (char **__stringp, __const char *__delim); 
extern __inline char *__strsep_1c (char **__s, char __reject); 
extern __inline char * 
__strsep_1c (char **__s, char __reject) 
{ 
register char *__retval = *__s; 
if (__retval != NULL && (*__s = (__extension__ (__builtin_constant_p ( __reject) && !__builtin_constant_p (__retval) && ( __reject) == '\0' ? (char *) __rawmemchr (__retval,  __reject) : __builtin_strchr (__retval,  __reject)))) != NULL) 
*(*__s)++ = '\0'; 
return __retval; 
} 
extern __inline char *__strsep_2c (char **__s, char __reject1, char __reject2); 
extern __inline char * 
__strsep_2c (char **__s, char __reject1, char __reject2) 
{ 
register char *__retval = *__s; 
if (__retval != NULL) 
{ 
register char *__cp = __retval; 
while (1) 
{ 
if (*__cp == '\0') 
{ 
__cp = NULL; 
break; 
} 
if (*__cp == __reject1 || *__cp == __reject2) 
{ 
*__cp++ = '\0'; 
break; 
} 
++__cp; 
} 
*__s = __cp; 
} 
return __retval; 
} 
extern __inline char *__strsep_3c (char **__s, char __reject1, char __reject2, 
char __reject3); 
extern __inline char * 
__strsep_3c (char **__s, char __reject1, char __reject2, char __reject3) 
{ 
register char *__retval = *__s; 
if (__retval != NULL) 
{ 
register char *__cp = __retval; 
while (1) 
{ 
if (*__cp == '\0') 
{ 
__cp = NULL; 
break; 
} 
if (*__cp == __reject1 || *__cp == __reject2 || *__cp == __reject3) 
{ 
*__cp++ = '\0'; 
break; 
} 
++__cp; 
} 
*__s = __cp; 
} 
return __retval; 
} 
__extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p ("hello this is a test") && __builtin_constant_p ( "the world that never ends") && (__s1_len = strlen ("hello this is a test"), __s2_len = strlen ( "the world that never ends"), (!((size_t)(const void *)(("hello this is a test") + 1) - (size_t)(const void *)("hello this is a test") == 1) || __s1_len >= 4) && (!((size_t)(const void *)(( "the world that never ends") + 1) - (size_t)(const void *)( "the world that never ends") == 1) || __s2_len >= 4)) ? __builtin_strcmp ("hello this is a test",  "the world that never ends") : (__builtin_constant_p ("hello this is a test") && ((size_t)(const void *)(("hello this is a test") + 1) - (size_t)(const void *)("hello this is a test") == 1) && (__s1_len = strlen ("hello this is a test"), __s1_len < 4) ? (__builtin_constant_p ( "the world that never ends") && ((size_t)(const void *)(( "the world that never ends") + 1) - (size_t)(const void *)( "the world that never ends") == 1) ? __builtin_strcmp ("hello this is a test",  "the world that never ends") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (  "the world that never ends"); register int __result = (((__const unsigned char *) (__const char *) ("hello this is a test"))[0] - __s2[0]); if ( __s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) ("hello this is a test"))[1] - __s2[1]); if ( __s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) ("hello this is a test"))[2] - __s2[2]); if ( __s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) ("hello this is a test"))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p ( "the world that never ends") && ((size_t)(const void *)(( "the world that never ends") + 1) - (size_t)(const void *)( "the world that never ends") == 1) && (__s2_len = strlen ( "the world that never ends"), __s2_len < 4) ? (__builtin_constant_p ("hello this is a test") && ((size_t)(const void *)(("hello this is a test") + 1) - (size_t)(const void *)("hello this is a test") == 1) ? __builtin_strcmp ("hello this is a test",  "the world that never ends") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) ("hello this is a test"); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (  "the world that never ends"))[0]; if ( __s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (  "the world that never ends"))[1]); if ( __s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (  "the world that never ends"))[2]); if ( __s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (  "the world that never ends"))[3]); } } __result; }))) : __builtin_strcmp ("hello this is a test",  "the world that never ends")))); }); 
